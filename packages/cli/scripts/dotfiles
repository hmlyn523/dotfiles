#!/bin/sh
 
set -e

GITHUB_PATH=~/projects/github.com
GIT_CLONE_PATH="$GITHUB_PATH"
STOW_PACKAGES_PATH="$GIT_CLONE_PATH"/dotfiles/packages
#STOW_PACKAGES_PATH="$GITHUB_PATH"/dotfiles/packages

os_type="$(uname)"  # ex) Darwin / Linux
arch_name="$(uname -m)" # ex) x86_64 / arm64

###########################################################
# Options
###########################################################
unlink_packages=
verbose=
for i in "$@"; do
    case "$i" in
        -s|--skip-apps)
            skip_apps=1
            shift ;;
        -v|--verbose)
            verbose=1
            shift ;;
        -g|--skip-git-setting)
            skip_git=1
            shift ;;
        -p|--skip-mise-prune)
            skip_prune=1
            shift ;;
        -u=*|--unlink=*)
            unlink_packages="${i#*=}"
            shift ;;
        *) ;;
    esac
done

###########################################################
# Utils
###########################################################
log() {
    message=$1
    echo "📌$message"
}

log_warning() {
    message=$1
    echo "$message"
}

is_file() {
    path="$1"
    [ -f "$path" ]
}

is_dir() {
    path="$1"
    [ -d "$path" ]
}

ensure_dir() {
    path="$1"
    if ! is_dir "$path"; then
        mkdir -p "$path"
    fi
}

log "Start dotfiles => ${os_type}/${arch_name}"

###########################################################
# Stow unlink
###########################################################
if [ -n "$unlink_packages" ]; then
    log 'Unlinking dotfiles...'
    stow -vD -d "$STOW_PACKAGES_PATH" -t ~ "$unlink_packages"
    exit
fi

###########################################################
# Check operating system or distribution
###########################################################
if [ "${os_type}" != "Darwin" ]; then
    if [ "${os_type}" != "Linux" ] || ! is_file /etc/arch-release; then
        log 'Supported is macOS or Arch Linux only...'
        exit 1
    fi
fi
log 'Check for supported OS ...OK'

###########################################################
# Stow unlink
###########################################################
if [ -n "$unlink_packages" ]; then
    log 'Unlinking dotfiles...'
    stow -vD -d "$STOW_PACKAGES_PATH" -t ~ "$unlink_packages"
    exit
fi

###########################################################
# Install Homebrew
###########################################################
if [ "${arch_name}" = "x86_64" ]; then
    if ! is_file /usr/local/bin/brew; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        log '=====> Install Homebrew SUCCESS'
    fi
elif [ "${arch_name}" = "arm64" ]; then
    if ! is_file /opt/homebrew/bin/brew; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        log 'Install Rosetta 2'
        sudo softwareupdate --install-rosetta
    fi
    eval "$(/opt/homebrew/bin/brew shellenv)"
    log '=====> Install Homebrew SUCCESS'
fi

###########################################################
# Clone dotfiles
###########################################################
ensure_dir "$GIT_CLONE_PATH"

if ! is_dir "$GIT_CLONE_PATH"/dotfiles; then
    log 'Clone dotfiles'
    cd "$GITHUB_PATH"
    git clone https://github.com/TatsuyaSagara/dotfiles.git
fi

###########################################################
# Install Apps and CLIs
###########################################################
if [ ! "$skip_apps" ]; then
    log 'Install Apps and CLIs'
    brew bundle --file "$GITHUB_PATH"/dotfiles/Brewfile $([ -n "$verbose" ] && echo -v)
fi

###########################################################
# Stow link
###########################################################
log 'Stow link'
ensure_dir ~/.config/alacritty
ensure_dir ~/.config/starship
ensure_dir ~/.config/yarn/global

mkdir -p $HOME/scripts
stow -vd "$STOW_PACKAGES_PATH" -t ~ $(ls $STOW_PACKAGES_PATH)

###########################################################
# Configure macOS setting
###########################################################
log 'Configuring macOS default settings'
~/scripts/macos-defaults

###########################################################
# Setup Neovim
###########################################################
plug_path=~/.local/share/nvim/site/autoload/plug.vim
if ! is_file "$plug_path"; then
    sh -c "curl -fLo $plug_path --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
fi

plugged_path=~/.local/share/nvim/autoload/plugged
if ! is_dir "$plugged_path"; then
    nvim +PlugInstall +qall
    log '=====> Setup Neovim SUCCESS'
fi

###########################################################
# Setup pynvim
###########################################################
python3 -m pip install pynvim

###########################################################
# Setup Git
###########################################################
if [ ! "$skip_git" ]; then
    if ! is_dir ~/.gnupg || [ -z "$(gpg --list-secret-keys --keyid-format LONG)" ]; then
        log 'Install gpg signing with git'
        gpg --default-new-key-algo rsa4096 --gen-key
        if [ "${os_type}" = "Darwin" ]; then
            key_id=$(gpg --list-secret-keys --keyid-format LONG | ggrep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/"  -f2)
        elif [ "${os_type}" = "Linux" ]; then
            key_id=$(gpg --list-secret-keys --keyid-format LONG | grep -oP "rsa4096\/[0-9a-fA-F]{16}" | cut -d"/"  -f2)
        fi
        log 'Copy and pates the GPG key below to GitHub'
        gpg --armor --export "$key_id"
        git config --global user.signingkey "$key_id"
    fi

    if ! is_file ~/.ssh/id_rsa.pub; then
        log 'Setup gpg signing for git'
        ssh-keygen -t rsa -b 4096 -C "tatsuya.sagara@icloud.com"
        log 'Copy and pates the SSH key below to GitHub'
        cat ~/.ssh/id_rsa.pub
    fi
    log '=====> Setup Git SUCCESS'
fi

####################t######################################
# mise
###########################################################
log 'mise'
#mise install &> /dev/null
if [ ! "$skip_apps" ]; then
  mise install
  if [ ! "$skip_prune" ]; then
    mise prune -y
  fi
fi
mise list

###########################################################
# Setup Yarn global
###########################################################
if ! command -v yarn >/dev/null 2>&1; then
  # https://qiita.com/iisaka51/items/845b39cdaa210cf6d31e#rtx-activateは何をするのでしょうか
  mise x -- npm install -g yarn
  log '=====> Setup Yarn global SUCCESS'
fi